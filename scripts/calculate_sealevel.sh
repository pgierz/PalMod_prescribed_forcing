#!/usr/bin/env bash
################################################################################
#
# SCRIPT: calculate_sealevel.sh
#
# PURPOSE: TODO
#
# REQUIRED INPUTS: TODO
#
# RETURNED OUTPUTS: TODO
#
# Project: PalMod
# Date: 2016-2019
#
# Scientists:
# Dr. Xu Zhang,   AWI Bremerhaven
# Dr. Paul Gierz, AWI Bremerhaven
#
# ------------
# Changes:
# ------------
#
# 29.01.18 Gierz
#
# Rewrite of Xu's scripts for improved clarity to ensure `PISM`-`MPIESM`
# coupling does the same thing.
#
################################################################################

# Say hello
echo -e "\033[1;32m S T A R T   O F   P R O G R A M"
echo "     calculate_sealevel.sh"
echo ""
echo " This script calculates change in ice sheet height per time (dHdt) and the"
echo " derived eustatic sea level change based upon data generated by Lev Tarasov"
echo ""
echo " Please also see README.md for a description of the transformations that"
echo " will be applied to the data."
echo ""
echo " Dr. Paul Gierz, AWI Bremerhaven"
echo -e "\033[39m"

read -r -d '' usage <<'EOF'
\033[36m U S A G E : \n
    -h, --help        display this help and exit\n
    -r, --raw-data    process raw data\n
    -v, --calc-vol    calculate the ice volume\n
    -d, --dHdt        calculate dHdt\n
    -s, --sealevel    calculate eustatic sealevel\n
    -p, --pointers    calculate pointer fields\n
    -a, --all         calculate all relevant fields\n
\n
\033[39m
\033[31m  !!! NOTE THAT THE RAW, INPUT, AND OUTPUT FILENAMES ARE HARD-CODED !!!
\033[39m
EOF

module purge
module load cdo nco


# Physical constants
density_ice=916.7  # kg m**-3
density_freshwater=1000

# Turn off all switches by default
pre=0
vol=0
dh=0
esl=0
pnt=0

if [ "$#" -eq 0 ]
then
    echo -e $usage
    exit
fi


# Parse arguments
for i in "$@"
do
    case $i in
        -h| --help)
            echo -e $usage
            exit
            ;;
        -r|--raw_data)
            pre=1
            EXTENSION="${i#*=}"
            shift # past argument=value
            ;;
        -v|--calc-vol)
            vol=1
            shift # past argument=value
            ;;
        -d|--dHdt)
            dh=1
            shift # past argument=value
            ;;
        -s|--sealevel)
            esl=1
            ;;
        -p|--pointers)
            pnt=1
            ;;
        -a|--all)
            pre=1
            vol=1
            dh=1
            esl=1
            pn1=1
            shift # past argument with no value
            ;;
        *)
            # unknown option
            ;;
    esac
done

# define CDO with some common switches
cdo="cdo -f nc -P 24"

PROJECT_HOME=/pf/a/a270077/PalMod_boundary_conditions/generate_forcing_from_tarasov_data/
# Define the directories to be used: original data location and temporary workdir
RAW_DATA_DIR=${PROJECT_HOME}/original_data_ltarasov/
WORK_DIR=${PROJECT_HOME}/work
OUT_DATA=${PROJECT_HOME}/outdata

# Define some colors and print functions to cleanly display each step:
red='\033[0;31m'
green='\033[0;32m'
blue='\033[0;34m'
bgcolor='\033[0m'
#
redln() { echo -e "${red}${1}${bgcolor}"; }
blueln() { echo -e "${blue}${1}${bgcolor}"; }
greenln () { echo -e "${green}${1}${bgcolor}"; }
#

line=________________________________________________________________________________

function banner {
    typeset line
    line=________________________________________________________________________________
    echo
    blueln $line
    echo
    greenln "$*"
    blueln $line
    echo
}

function prepare_raw_data {
    banner "Preparing raw data..."
    ### Define variable names for this function
    # RAW input
    # NOTE: Lev uses a time axis of 0.1 ka BP, and the first year is 40ka BP
    RAW_DATA=${RAW_DATA_DIR}/GLAC1DHiceF40.nc

    # INTERMEDIATE files
    GSM_HEIGHT=${WORK_DIR}/$(basename ${RAW_DATA})
    GSM_AREA=${WORK_DIR}/GSM_gridarea.nc
    GSM_VOL=${WORK_DIR}/GSM_liquid_water_equivalent_ice_volume_35ka.nc
    rmlist="$GSM_HEIGHT $GSM_AREA $GSM_VOL $rmlist"

    # PROCESSED output
    OUTPUT_DATA=${OUT_DATA}/$(basename ${GSM_VOL})

    # Determine the gridarea that the Glacial System Model (GSM) was run on:
    $cdo gridarea ${RAW_DATA} ${GSM_AREA}

    # Prepare any RAW output that needs to be directly copied into an intermediate file
    cp ${RAW_DATA} ${GSM_HEIGHT}

    # STEPS (Read from bottom of cdo command up)
    #
    # 1. Transform from height to volume of water-equivalent:
    # (kg = height (m) * area (m**2) * density_ice (kg m**-3) / density_water (kg m**-3)
    #
    # 2. Correct time axis for selection of individual years
    #
    # 3. Select years 50 until 401 (35ka BP until 0ka BP), and reset the axis to start from year 0 again
    $cdo -settaxis,0000-12-31,12:00,1year \
         -selyear,50/401 \
         -settaxis,0000-12-31,12:00,1year \
         -divc,$density_freshwater -mulc,$density_ice \
         -mul \
         ${GSM_HEIGHT} ${GSM_AREA} \
         ${GSM_VOL}

    # OUTPUT:
    cp ${GSM_VOL} ${OUTPUT_DATA}

    # Cleanup intermediate files
   rm -v $rmlist
   echo "...finished!"

   echo -e "${blue} >>> OUTPUT is ${OUTPUT_DATA} ${bgcolor}"

   redln $line
}


function calculate_masked_ice_volume {
    banner "Calculate masked ice volume..."
    ### Define Filenames
    # RAW Files:
    RAW_MASK=${RAW_DATA_DIR}/TOPicemsk.GLACD35kN9894GE90227A6005GGrBgic.nc
    # Input:
    INPUT=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka.nc
    # Output:
    OUTPUT=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka_masked.nc
    ### Define Variable names
    GSM_MASK_VAR_NAME=ICEM

    $cdo -mul \
        -remapcon,$INPUT -selvar,$GSM_MASK_VAR_NAME $RAW_MASK \
         $INPUT \
         $OUTPUT

   echo "...finished!"
   echo -e "${blue} >>> OUTPUT is ${OUTPUT} ${bgcolor}"
   redln $line
}


function calculate_dHdt {
    banner "Calculate dHdt..."
    ### Define Filenames:
    # Input:
    INPUT=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka_masked.nc  # UNITS m**3
    OUTPUT1=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka_masked_dHdt.nc   # units m**3/s
    # Output:
    OUTPUT2=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka_masked_dHdt_fldsum_Sv.nc
    
    echo -e "${red}"
    echo -e " >>> OUTPUT2 will be the file used for the salinity compensation! "
    echo -e " >>> $OUTPUT2 "
    echo -e "${bgcolor}"
    
    # In the next step, the difference between years 0/349 and 1/350 is calculated (dH)
    # and divided by the number of seconds in 100 years (dt)

    num_seconds_in_100_years=$(python -c "num_secs=60*60*24*365*100; print('%e' % num_secs)")
    $cdo -settaxis,0000-12-31,12:00,1year \
         -divc,$num_seconds_in_100_years \
         -sub \
         -selyear,1/350 -settaxis,0000-12-31,12:00,1year $INPUT \
         -selyear,0/349 -settaxis,0000-12-31,12:00,1year $INPUT \
         $OUTPUT1

    # Perform an ncap2 operation on the variable describing the internal time axis to keep it clear.
    # Multiply by 0.1 to go from kiloyears to 100 years, and subtract 34.95 to set to 35kaBP
    ncap2 -s "T122KP11=T122KP11*0.1-34.95" $OUTPUT1

    # Generate the dHdt timeseries output based upon the conversions already applied:
    num_m_per_sec_in_Sv=1e6
    $cdo -fldsum \
        -divc,$num_m_per_sec_in_Sv \
        -settaxis,0000-12-31,12:00,1year \
        $OUTPUT1 \
        $OUTPUT2

    # FIXME: Check if the next step is needed.
    ################################################################################
    # QUESTION: in the next step, you apply the ncap2 operation again, but the
    # file has already been modified! Why does it need to be done twice?
    ################################################################################
    # Apply the ncap2 operation again to correct the internal variable describing the time axis
    ncap2 -s "T122KP11=T122KP11*0.1-34.95" $OUTPUT2
   echo "...finished!"
   echo -e "${blue} >>> OUTPUTS ARE ${OUTPUT1} ${OUTPUT2} ${bgcolor}"
   redln $line
}


function calculate_eustatic_sealevel {
    banner "Calculate eustatic sealevel..."
    INPUT=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka_masked.nc
    OUTPUT=${OUT_DATA}/GSM_liquid_water_equivalent_ice_volume_35ka_masked_global_esl.nc
    echo -e "${red}"
    echo -e "#################################################################################"
    echo -e " !!! CAUTION The area value used in this calculation (3.62E14) is the area of the ocean under"
    echo -e " !!! Pre-Industrial conditions. It is *NOT* derived from the modelled area (THIS NEEDS TO BE FIXED!!!)"
    echo -e " !!! This approximation is not exact, area of ocean was smaller when sea level was lower !!!"
    echo -e "################################################################################"
    echo -e "${bgcolor}"
    area_of_ocean=3.62E14  # UNITS: m**2
    $cdo -settaxis,0000-12-31,12:00,1year \
        -divc,$area_of_ocean \
        -fldsum \
        $INPUT \
        $OUTPUT
   echo "...finished!"
   echo -e "${blue} >>> OUTPUT is ${OUTPUT} ${bgcolor}"
   redln $line
}

function extract_pointer_field_dHdt {
    # File Definitions
    RAW_DATA=${RAW_DATA_DIR}/GLAC1DdrainagePointerF40ka.nc
    OUTPUT=${OUT_DATA}/GSM_pointer_fields_35ka.nc
    # Select years 51 until 400 of the raw data, and reset the time axis.
    # Remember that Lev starts at 40ka BP in steps of 0.01 ka!
    $cdo -settaxis,0000-12-31,12:00,1year \
         -selyear,51/400 \
         -settaxis,0000-12-31,12:00,1year \
         $RAW_DATA \
         $OUTPUT
    # Reset the internal time axis as well
    ncap2 -s "T40H1=T40H1*0.1-34.95" $OUTPUT
   echo "...finished!"
   echo -e "${blue} >>> OUTPUT is ${OUTPUT} ${bgcolor}"
   redln $line
}

# Prepare the work directory:
[[ ! -d ${WORK_DIR} ]] && mkdir -p ${WORK_DIR}

if [[ $pre = 1 ]]
then
    prepare_raw_data
fi

# extract the area where there is ice volume change
if [[ $vol = 1 ]]
then
    calculate_masked_ice_volume
fi

# calculate DH/DT
if [[ $dh = 1 ]]
then
    calculate_dHdt
fi


# assess the e.s.l. change due to ice volume changes
if [[ $esl = 1 ]]
then
    calculate_eustatic_sealevel
fi

# extract the pointer field for Dh/Dt
if [[ $pnt = 1 ]]
then
    extract_pointer_field_dHdt
fi

# Clean up the work directory:
[[ -d ${WORK_DIR} ]] && rm -rf ${WORK_DIR}


